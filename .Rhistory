unknown <- prep_ms_trio(unknown)
recode <- numericSNPmat(unknown)
df_ms <- data.frame(t(recode)) %>%
`colnames<-`(c("V1", "V2", "V3")) %>%
mutate(Locus = rownames(.)) %>%
left_join(freqs, by = "Locus") %>%
mutate(p = as.numeric(p),
q = as.numeric(q))
out <- test1_ms(df = df_ms, Th = 0.11)
test1_ms(df = df_ms, Th = 0.11)
prod(test1_ms$prob)
1/(prod(test1_ms$prob, na.rm = T))
test1_ms
case1 <- test1_ms(df = df_ms, Th = 0.11)
1/(prod(case1$prob, na.rm = T))
unknown <- read_excel("data/AGP_trio.xlsx")
#path <- "data/human_CODIS_db.xlsx"
path <- "data/AGP_reference_db.xlsx"
path <- "data/AGP_reference_db.xlsx"
db <- path %>%
excel_sheets() %>%
set_names() %>%
purrr::map(read_excel, path = path)
# Genalex
freqs <- freqs2freqs_genalex(db)
freqs <- extract_known_alleles(unknown, freqs)
unknown <- prep_ms_trio(unknown)
recode <- numericSNPmat(unknown)
df_ms <- data.frame(t(recode)) %>%
`colnames<-`(c("V1", "V2", "V3")) %>%
mutate(Locus = rownames(.)) %>%
left_join(freqs, by = "Locus") %>%
mutate(p = as.numeric(p),
q = as.numeric(q))
case2 <- test2_ms(df = df_ms, Th = 0)
case2 <- test2_ms(df = df_ms, Th = 0.01)
1/(prod(case2$prob, na.rm = T))
prod(case2$prob, na.rm = T)
unknown <- read_excel("data/tiger_duo.xlsx")
path <- "data/tiger_reference_db.xlsx"
db <- path %>%
excel_sheets() %>%
set_names() %>%
purrr::map(read_excel, path = path)
# Genalex
freqs <- freqs2freqs_genalex(db)
freqs <- extract_known_alleles(unknown, freqs)
unknown <- prep_ms_duo(unknown)
recode <- numericSNPmat(unknown)
df_ms <- data.frame(t(recode)) %>%
`colnames<-`(c("V1", "V2")) %>%
mutate(Locus = rownames(.)) %>%
left_join(freqs, by = "Locus") %>%
mutate(p = as.numeric(p),
q = as.numeric(q))
case3 <- test3_ms(df = df_ms, Th = 0.01)
1/(prod(case2$prob, na.rm = T))
1/(prod(case3$prob, na.rm = T))
prod(case3$prob, na.rm = T)
seqs <- readDNAStringSet("data/rtb_cockatoo.fa", format = "fasta")
haplotype_network(seqs, pop_header = T)
haplotype_network(seqs, pop_header = F)
seqs <- readDNAStringSet("data/rtb_cockatoo.fa", format = "fasta")
seqs
haplotype_network(seqs, pop_header = T)
haplotype_network(seqs, pop_header = F)
haplotype_network(seqs, pop_header = F, scale_ratio = 0.03,
x_coord = 4,
y_coord = 8)
x_coord = 4
y_coord = 8
scale_ratio = 0.03
pop_header = F
database <- seqs
# d <- readDNAStringSet(database, format="fasta")
# unknown <- readDNAStringSet(unknown, format = "fasta")
#seqs <- DNAStringSet(c(database, unknown))
#seqs <- DNAStringSet(database)
seqs <- ape::as.DNAbin(database)
# Read in csv files with pop IDs in the order of the associated individual in the fasta file, then replace.
#pops <- read.csv(pop_file, header = FALSE)
pops <- as.matrix(pop_file)
haplotype_network(seqs, pop_header = T,
scale_ratio = 0.03,
x_coord = 4,
y_coord = 8)
names(seqs) <- sub('.*(_|-)', '', names(seqs)) # Probably need something different here
seqs
# Extract haplotypes from the list of sequences.
h <- pegas::haplotype(seqs)
# Compute haplotype network. Can include Templeton's probabilities if needed.
net <- pegas::haploNet(h)
lab <- as.character(attr(net, "freq"))
attr(net, "labels") <- lab
ind.hap<-with(
utils::stack(setNames(attr(h, "index"), rownames(h))),
table(hap=ind, pop=names(seqs)[values])
)
ind.hap <- apply(ind.hap, 1, function(x) x/sum(colSums(ind.hap)))
ind.hap <- t(ind.hap)
# 18 colours
pal <- c("cadetblue3", "chartreuse1", "chocolate1","darkmagenta","darkgreen",
"firebrick","darkgoldenrod1","bisque4","blue2", "deeppink", "saddlebrown",
"yellow","gray75","red", "seagreen", "cyan", "plum2","gray15")
pie(rep(1, length(pal)), col = pal , main="")
plot(net, size=attr(net, "freq"), bg=pal, scale.ratio=scale_ratio, pie=ind.hap)
legend(x_coord, y_coord, colnames(ind.hap), col=pal, pch=19, ncol=2)
seqs <- readDNAStringSet("data/rtb_cockatoo.fa", format = "fasta")
haplotype_network(seqs, pop_header = T,
scale_ratio = 0.03,
x_coord = 4,
y_coord = 8)
haplotype_network <- function(database = database,
pop_header = F,
pop_file = pop_file,
scale_ratio = scale_ratio,
x_coord = x_coord,
y_coord = y_coord){
#~~ Read in fasta files: I've just coded this so the user has to upload two separate files
# d <- readDNAStringSet(database, format="fasta")
# unknown <- readDNAStringSet(unknown, format = "fasta")
#seqs <- DNAStringSet(c(database, unknown))
#seqs <- DNAStringSet(database)
seqs <- ape::as.DNAbin(database)
#~~ Replace sample names with pop IDs
if(pop_header == TRUE) {
names(seqs) <- sub('.*(_|-)', '', names(seqs)) # Probably need something different here
}
if(pop_header == FALSE) {
# Read in csv files with pop IDs in the order of the associated individual in the fasta file, then replace.
#pops <- read.csv(pop_file, header = FALSE)
pops <- as.matrix(pop_file)
names(seqs) <- pops
}
#~~ Compute haplotype network
# Do we need this????
# Compute distance matrix. By default this uses the "K80" evolutioanry model, and gamma is false. Can easily change this and/or add a model testing step.
#e <- dist.dna(d)
# Extract haplotypes from the list of sequences.
h <- pegas::haplotype(seqs)
# Compute haplotype network. Can include Templeton's probabilities if needed.
net <- pegas::haploNet(h)
#~~ Plot haplotype network
# Label haplotype groups (have just included the first here as it is clear from the colours which group the unknown is in)
# Although do we even need this: size of circles is proportional
lab <- as.character(attr(net, "freq"))
attr(net, "labels") <- lab
ind.hap<-with(
utils::stack(setNames(attr(h, "index"), rownames(h))),
table(hap=ind, pop=names(seqs)[values])
)
# Code to standardise values by total number of seqs -- hope this works.
ind.hap <- apply(ind.hap, 1, function(x) x/sum(colSums(ind.hap)))
ind.hap <- t(ind.hap)
# Plotting network
#pal <- brewer.pal(n = 9, name = "Set1")
#pal <- c(colorRampPalette(brewer.pal(10,"Paired"))(50),colorRampPalette(brewer.pal(10,"Set3"))(50))
#set.seed(150)
#pal <- sample(pal) # get a good sample
#pal <- brewer.pal.info[brewer.pal.info$category == "Set3"]
#pals_vector<-unlist(mapply(brewer.pal, pal$maxcolors, rownames(pal)))
#pal <- sample(pal)
# 18 colours
pal <- c("cadetblue3", "chartreuse1", "chocolate1","darkmagenta","darkgreen",
"firebrick","darkgoldenrod1","bisque4","blue2", "deeppink", "saddlebrown",
"yellow","gray75","red", "seagreen", "cyan", "plum2","gray15")
#pie(rep(1, length(pal)), col = pal , main="")
plot(net, size=attr(net, "freq"), bg=pal, scale.ratio=scale_ratio, pie=ind.hap)
# Adding legend
legend(x_coord, y_coord, colnames(ind.hap), col=pal, pch=19, ncol=2)
}
haplotype_network(seqs, pop_header = T,
scale_ratio = 0.03,
x_coord = 4,
y_coord = 8)
haplotype_network(seqs, pop_header = T,
scale_ratio = 0.01,
x_coord = 4,
y_coord = 8)
runApp()
haplotype_network(seqs, pop_header = T,
scale_ratio = 0.3,
x_coord = 14,
y_coord = -8)
haplotype_network(seqs, pop_header = T,
scale_ratio = 0.3,
x_coord = 14,
y_coord = -8)
haplotype_network(seqs, pop_header = T,
scale_ratio = 0.3,
x_coord = -8,
y_coord = 14)
haplotype_network(seqs, pop_header = T,
scale_ratio = 0.3,
x_coord = -8,
y_coord = 12)
haplotype_network(seqs, pop_header = T,
scale_ratio = 0.3,
x_coord = -2,
y_coord = 10)
haplotype_network(seqs, pop_header = T,
scale_ratio = 0.3,
x_coord = -12,
y_coord = 10)
haplotype_network(seqs, pop_header = T,
scale_ratio = 0.3,
x_coord = -20,
y_coord = 10)
haplotype_network(seqs, pop_header = T,
scale_ratio = 0.3,
x_coord = -20,
y_coord = 14)
haplotype_network(seqs, pop_header = T,
scale_ratio = 0.3,
x_coord = -20,
y_coord = 8)
haplotype_network(seqs, pop_header = T,
scale_ratio = 0.3,
x_coord = -20,
y_coord = 4)
library(ggplot2)
library(plyr)
library(dplyr)
library(data.table)
library(readxl)
library(purrr)
library(tidyr)
library(RColorBrewer)
library(kableExtra)
library(ips)
library(ape)
library(msa)
library(phangorn)
# Needed for windows
library(pegas)
library(adegenet)
source("scripts/1.0_LoadAlignment.R")
source("scripts/1.1_seqsimilarityID.R")
source("scripts/1.2_phyloID.R")
source("scripts/2.1_individualisation.R")
source("scripts/3.1_parentage.R")
source("scripts/4.1_haplotype_network.R")
#source("scripts/5.1_marker_selection.R")
source("scripts/theme_emily.R")
seq1 <- readDNAStringSet("data/rhino_unknown.fa", format="fasta")
seq2 <- readDNAStringSet("data/rhino_reference.fa", format="fasta")
seq <- DNAStringSet(c(seq1, seq2))
x <- LoadAlignment(seq, align = T)
ape::image.DNAbin(x, col = c("#CB2314", "#FAD510", "#4daf4a", "#5BBCD6", "grey", "black"))
tree <- phyloID(DNAbin = x,
model = "auto",
outgroup = T,
gamma = FALSE,
bootstraps = 10)
plotPhylo(tree)
seqsimilarityID(DNAbin = x,
model = "K80",
hits = 10)
seq1 <- readDNAStringSet("data/macaw_unknown.fa", format="fasta")
seq2 <- readDNAStringSet("data/macaw_reference.fa", format="fasta")
seq <- DNAStringSet(c(seq1, seq2))
x <- LoadAlignment(seq, align = F)
ape::image.DNAbin(x, col = c("#CB2314", "#FAD510", "#4daf4a", "#5BBCD6", "grey", "black"))
ape::image.DNAbin(x, col = c("#CB2314", "#FAD510", "#4daf4a", "#5BBCD6", "grey", "black"))
tree <- phyloID(DNAbin = x,
model = "auto",
outgroup = T,
gamma = FALSE,
bootstraps = 10)
plotPhylo(tree)
seqsimilarityID(DNAbin = x,
model = "K80",
hits = 10)
u <- read_excel("data/badger_trace.xlsx")
path <- "data/badger_reference_db.xlsx"
db <- path %>%
excel_sheets() %>%
set_names() %>%
purrr::map(read_excel, path = path)
individualisation(db = db,
unknown = u,
Th = 0.12,
allele_freq = T,
known_alleles = T)
u <- read_excel("data/individualisation_unknown.xls")
db <- read_excel("data/individualisation_genotype_db.xls")
1/individualisation(db = db,
unknown = u,
Th = 0.12,
allele_freq = T,
known_alleles = T)
individualisation(db = db,
unknown = u,
Th = 0.12,
allele_freq = T,
known_alleles = T)
db <- path %>%
excel_sheets() %>%
set_names() %>%
purrr::map(read_excel, path = path)
individualisation(db = db,
unknown = u,
Th = 0.12,
allele_freq = T,
known_alleles = T)
u <- read_excel("data/badger_trace.xlsx")
path <- "data/badger_reference_db.xlsx"
db <- path %>%
excel_sheets() %>%
set_names() %>%
purrr::map(read_excel, path = path)
individualisation(db = db,
unknown = u,
Th = 0.12,
allele_freq = T,
known_alleles = T)
1/individualisation(db = db,
unknown = u,
Th = 0.12,
allele_freq = T,
known_alleles = T)
u <- read_excel("data/individualisation_unknown.xls")
db <- read_excel("data/individualisation_genotype_db.xls")
1/individualisation(db = db,
unknown = u,
Th = 0,
allele_freq = F,
known_alleles = T)
db <- fread("data/fur_seal_SNP_genotypes.raw", header = T)
trio <- fread("data/fur_seal_trio.raw")
freqs <- alleleFreqs_plink(db)
trio <- prep_snp_trio(trio)
df <- dplyr::left_join(trio, freqs, by = "SNP_ID")
test1_snps(df)
test2_snps(df)
duo <- fread("data/fur_seal_duo.raw")
duo <- prep_snp_duo(duo)
df <- left_join(duo, freqs, by = "SNP_ID")
test3_snps(df)
unknown <- read_excel("data/dog_trio.xlsx")
unknown <- read_excel("data/dog_trio.xlsx")
path <- "data/dog_reference_db.xlsx"
db <- path %>%
excel_sheets() %>%
set_names() %>%
purrr::map(read_excel, path = path)
freqs <- freqs2freqs_genalex(db)
freqs <- top2freq(freqs)
unknown <- prep_ms_trio(unknown)
recode <- numericSNPmat(unknown)
df_ms <- data.frame(t(recode)) %>%
`colnames<-`(c("V1", "V2", "V3")) %>%
mutate(Locus = rownames(.)) %>%
left_join(freqs, by = "Locus") %>%
mutate(p = as.numeric(p),
q = as.numeric(q))
case1 <- test1_ms(df = df_ms, Th = 0.11)
1/(prod(case1$prob, na.rm = T))
unknown <- read_excel("data/AGP_trio.xlsx")
path <- "data/AGP_reference_db.xlsx"
db <- path %>%
excel_sheets() %>%
set_names() %>%
purrr::map(read_excel, path = path)
# Genalex
freqs <- freqs2freqs_genalex(db)
freqs <- extract_known_alleles(unknown, freqs)
unknown <- prep_ms_trio(unknown)
recode <- numericSNPmat(unknown)
df_ms <- data.frame(t(recode)) %>%
`colnames<-`(c("V1", "V2", "V3")) %>%
mutate(Locus = rownames(.)) %>%
left_join(freqs, by = "Locus") %>%
mutate(p = as.numeric(p),
q = as.numeric(q))
case2 <- test2_ms(df = df_ms, Th = 0.01)
prod(case2$prob, na.rm = T)
unknown <- read_excel("data/tiger_duo.xlsx")
path <- "data/tiger_reference_db.xlsx"
db <- path %>%
excel_sheets() %>%
set_names() %>%
purrr::map(read_excel, path = path)
# Genalex
freqs <- freqs2freqs_genalex(db)
freqs <- extract_known_alleles(unknown, freqs)
unknown <- prep_ms_duo(unknown)
recode <- numericSNPmat(unknown)
df_ms <- data.frame(t(recode)) %>%
`colnames<-`(c("V1", "V2")) %>%
mutate(Locus = rownames(.)) %>%
left_join(freqs, by = "Locus") %>%
mutate(p = as.numeric(p),
q = as.numeric(q))
case3 <- test3_ms(df = df_ms, Th = 0.01)
prod(case3$prob, na.rm = T)
seqs <- readDNAStringSet("data/rtb_cockatoo.fa", format = "fasta")
haplotype_network(seqs, pop_header = T,
scale_ratio = 0.3,
x_coord = -20,
y_coord = 4)
shiny::runApp()
RVersion()
R.version()
version
shiny::runApp()
shiny::runApp()
seqs <- readDNAStringSet("~/Desktop/data/Eland network.fasta", format = "fasta")
library(ggplot2)
library(plyr)
library(dplyr)
library(data.table)
library(readxl)
library(purrr)
library(tidyr)
library(RColorBrewer)
library(kableExtra)
library(ips)
library(ape)
library(msa)
library(phangorn)
# Needed for windows
library(pegas)
library(adegenet)
options(shiny.maxRequestSize=10*1024^2)
# Run this before deploying:
source("scripts/1.0_LoadAlignment.R")
source("scripts/1.1_seqsimilarityID.R")
source("scripts/1.2_phyloID.R")
source("scripts/2.1_individualisation.R")
source("scripts/3.1_parentage.R")
source("scripts/4.1_haplotype_network.R")
#source("scripts/5.1_marker_selection.R")
source("scripts/theme_emily.R")
seqs <- readDNAStringSet("~/Desktop/data/Eland network.fasta", format = "fasta")
haplotype_network(seqs, pop_header = T,
scale_ratio = 0.3,
x_coord = -20,
y_coord = 4)
seq <- seqs
x <- LoadAlignment(seq, align = T)
haplotype_network(x, pop_header = T,
scale_ratio = 0.3,
x_coord = -20,
y_coord = 4)
x
write.FASTA(x, "~/Desktop/data/Eland network.fasta")
?write.FASTA
seqs <- readDNAStringSet("~/Desktop/data/eland.fasta", format = "fasta")
haplotype_network(seqs, pop_header = T,
scale_ratio = 0.3,
x_coord = -20,
y_coord = 4)
source('~/Dropbox/ConGen/PROJECTS/wildlife_detectR/shiny_wildlifedetectR/scripts/example_package.R', echo=TRUE)
setRepositories(addURLs = c(BioC = "https://bioconductor.org/packages/3.9/bioc"))
#setRepositories(addURLs = c(BioC = "https://bioconductor.org/packages/3.9/bioc"))
getOption("repos")
?write.nexus
seqs <- readDNAStringSet("~/Desktop/data/eland.fasta", format = "fasta")
write.nexus(seqs, "~/Desktop/data/eland.nexus")
x <- seqs
x <- LoadAlignment(seq, align = T)
source("scripts/1.0_LoadAlignment.R")
source("scripts/1.1_seqsimilarityID.R")
source("scripts/1.2_phyloID.R")
source("scripts/2.1_individualisation.R")
source("scripts/3.1_parentage.R")
source("scripts/4.1_haplotype_network.R")
#source("scripts/5.1_marker_selection.R")
source("scripts/theme_emily.R")
x <- LoadAlignment(seq, align = T)
seqs <- readDNAStringSet("~/Desktop/data/eland.fasta", format = "fasta")
x <- seqs
x <- LoadAlignment(seq, align = T)
seqs <- readDNAStringSet("~/Desktop/data/eland.fasta", format = "fasta")
seq <- seqs
x <- LoadAlignment(seq, align = T)
tree <- phyloID(DNAbin = x,
model = "auto",
outgroup = T,
gamma = FALSE,
bootstraps = 10)
plotPhylo(tree)
write.nexus(tree, "~/Desktop/data/eland.nexus")
tree
write.nexus(tree, file="~/Desktop/data/eland.nexus")
seqs <- readDNAStringSet("~/Desktop/data/eland.fasta", format = "fasta")
seq <- readDNAStringSet("~/Desktop/data/eland.fasta", format = "fasta")
x <- LoadAlignment(seq, align = T)
tree <- phyloID(DNAbin = x,
model = "auto",
outgroup = T,
gamma = FALSE,
bootstraps = 10)
write.nexus(tree, file="~/Desktop/data/eland.nexus")
seqs <- readDNAStringSet("~/Desktop/data/eland.fasta", format = "fasta")
haplotype_network(seqs, pop_header = T,
scale_ratio = 0.3,
x_coord = -20,
y_coord = 4)
setRepositories(addURLs = c(BioC = "https://bioconductor.org/packages/3.9/bioc"))
#setRepositories(addURLs = c(BioC = "https://bioconductor.org/packages/3.9/bioc"))
getOption("repos")
shiny::runApp()
install.packages("msa")
shiny::runApp()
library(msa)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install(c("msa"))
runApp()
